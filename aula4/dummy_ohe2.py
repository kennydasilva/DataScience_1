# -*- coding: utf-8 -*-
"""Dummy_OHE.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SdrVNUKvIAql8erPITLrcGLZlslRnltE
"""

import pandas as pd

df=pd.read_csv('homeprices.csv')
df

dumies=pd.get_dummies(df.town)
dumies

merged=pd.concat([df,dumies],axis='columns')
merged

final=merged.drop(['town','west windsor'],axis='columns')
final

from sklearn.linear_model import LinearRegression
model=LinearRegression()

X=final.drop('price',axis='columns')
X

y=final.price
y

model.fit(X,y)

model.predict([[2800,0,1]])

model.predict([[3400,0,0]])

model.score(X,y)

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

dfle=df
dfle.town=le.fit_transform(dfle.town)
dfle

X=dfle[['town','area']].values
X

y=dfle.price
y

from sklearn.preprocessing import OneHotEncoder
ohe = OneHotEncoder(drop='first', sparse_output=False)

ohe.fit_transform(X)

X=X[:,1:]
X

model.fit(X,y)

#model.predict([[1,0,2800]])

from sklearn.preprocessing import OneHotEncoder, LabelEncoder
import pandas as pd
from sklearn.linear_model import LinearRegression

# Carregar dados
df = pd.read_csv('homeprices.csv')

# Codificar a coluna 'town' com LabelEncoder
le = LabelEncoder()
df['town_encoded'] = le.fit_transform(df['town'])

# Variáveis independentes e dependente
X = df[['town_encoded', 'area']]
y = df['price']

# Aplicar OneHotEncoder (Usar sparse_output=False em vez de sparse=False)
ohe = OneHotEncoder(drop='first', sparse_output=False)  # CORRIGIDO AQUI
X_encoded = ohe.fit_transform(X)

# Treinamento do modelo com OneHotEncoder
model = LinearRegression()
model.fit(X_encoded, y)

# Previsão considerando a codificação correta
entrada = pd.DataFrame([[1, 2800]], columns=['town_encoded', 'area'])
entrada_encoded = ohe.transform(entrada)

previsao = model.predict(entrada_encoded)
print("Previsão com OneHotEncoder:", previsao)

df=pd.read_csv('carprices.csv')
df

from matplotlib import pyplot as plt
df.plot(kind='scatter', x='Mileage', y='Sell Price($)', s=32, alpha=.8)
plt.gca().spines[['top', 'right',]].set_visible(False)

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

dumies=pd.get_dummies(df['Car Model'])
dumies

merged=pd.concat([df,dumies],axis='columns')
merged

final=merged.drop(['Car Model','Mercedez Benz C class'],axis='columns')
final

from sklearn.linear_model import LinearRegression
model=LinearRegression()

X=final.drop('Sell Price($)',axis='columns')
X

y=final['Sell Price($)']
y

model.fit(X,y)

model.predict([[4500,4,0,0]])

model.predict([[86000,7,0,1]])

model.score(X,y)

from sklearn.preprocessing import OneHotEncoder, LabelEncoder
import pandas as pd
from sklearn.linear_model import LinearRegression

le = LabelEncoder()
df['car_encoded'] = le.fit_transform(df['Car Model'])

df['car_encoded']

X = df[['car_encoded', 'Mileage','Age(yrs)']]
y = df['Sell Price($)']

ohe = OneHotEncoder(drop='first', sparse_output=False)
X_encoded = ohe.fit_transform(X)

from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.compose import ColumnTransformer
import pandas as pd
from sklearn.linear_model import LinearRegression

preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(drop='first'), ['car_encoded']),  # Apenas para a coluna categórica
        ('num', 'passthrough', ['Mileage', 'Age(yrs)'])        # Mantém as numéricas inalteradas
    ])

X_encoded = preprocessor.fit_transform(X)

model = LinearRegression()
model.fit(X_encoded, y)

entrada = pd.DataFrame([[2, 45000, 4]], columns=['car_encoded', 'Mileage', 'Age(yrs)'])

entrada_encoded = preprocessor.transform(entrada)

previsao = model.predict(entrada_encoded)
print("Preço previsto:", previsao)

model.score(X_encoded,y)